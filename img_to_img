import requests
import time
import uuid

def get_image_url(result_code):
    headers = {
        "mj-api-secret": "w5AAU0pj0kYHIkTA"
    }

    while True:
        try:
            response = requests.get(
                f"http://{ip:port}/mj/task/{result_code}/fetch", headers=headers
            )
            if response.status_code != 200:
                raise Exception(f"查询任务失败，状态码: {response.status_code}, 内容: {response.text}")

            try:
                res = response.json()
            except ValueError:
                raise Exception("任务状态响应不是 JSON 格式: " + response.text)

            status = res.get('status')

            if status == "SUCCESS":
                image_url = res.get('imageUrl')
                if image_url:
                    return image_url
                else:
                    raise Exception("生成成功但未返回 imageUrl")
            elif status in ["IN_PROGRESS", "NOT_START"]:
                progress = res.get('progress')
                print(f"任务状态为 {status}... 已处理{progress}")
                time.sleep(2)
            elif status == "FAILURE":
                raise Exception("生成图片失败")


        except requests.RequestException as e:
            raise Exception(f"调用 MJ 服务失败: {str(e)}")



# 如果你使用 FastAPI，请取消注释这行：
# from fastapi import HTTPException

MJ_URL = "http://{ip:port}/mj/submit/imagine"


def imagein_result(img_url):
    data = {
        "prompt": img_url
    }
    headers = {
        "Content-Type": "application/json",
        "mj-api-secret": "w5AAU0pj0kYHIkTA"
    }
    try:
        response = requests.post(MJ_URL, json=data, headers=headers)
        if response.status_code != 200:
            raise Exception(f"MJ 请求失败，状态码: {response.status_code}, 内容: {response.text}")

        try:
            result_json = response.json()
        except ValueError:
            raise Exception("MJ 响应不是合法的 JSON 格式: " + response.text)

        if result_json.get('code') == 1:
            return result_json.get('result')
        else:
            raise Exception(f"MJ 返回异常: {result_json}")
    except requests.RequestException as e:
        raise Exception(f"调用 MJ 服务失败: {str(e)}")








def main(arg1: str, arg2: str, arg3: str, arg4: str):
    final_prompt = arg3

    # 拼接最终提示词
    if arg4:
        final_prompt = final_prompt + " " + arg4
    if arg2:
        final_prompt = final_prompt + arg2
    if arg1:
        final_prompt = final_prompt + " --ar " + arg1

    final_prompt = final_prompt + " --v 6.1 --q 2 --raw"

    submit = imagein_result(final_prompt)

    img_url, process_list = get_image_url(submit)

    # 上传到 OSS
    oss_api_url = "http://{ip:port}/upload/midjourney_url"
    payload = {
        "access_key_id": "",
        "access_key_secret": "",
        "bucket_name": "",
        "endpoint": "",
        "oss_directory": "image/midjourney",
        "url": img_url
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer sXM7JMkzyellhaYq3bfBx9oB"
    }

    try:
        response = requests.post(oss_api_url, json=payload, headers=headers)
        if response.status_code == 200:
            D = response.json()
            if D['code'] == "1":
                files = D['files']
                return {
                    "result": str({"oss_key": files, "process_list": process_list})
                }

    except requests.RequestException as e:
        raise Exception(f"调用 OSS 上传接口失败: {str(e)}")

if __name__ == '__main__':
    main("9:16", "写真", "https://img.shetu66.com/2022/08/cutCoverImg/1663065886180574.png","将裙子颜色换成紫色")
